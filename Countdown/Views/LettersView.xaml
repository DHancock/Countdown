<UserControl x:Class="Countdown.Views.LettersView"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:local="clr-namespace:Countdown.Views"
            mc:Ignorable="d" 
            d:DesignHeight="350" d:DesignWidth="500"
            DataContext="{Binding LettersViewModel}">
    <UserControl.Resources>

        <!-- draws green tick, or red cross path depending on data triggers -->
        <Style x:Key="CrossTickStyle" TargetType="{x:Type Path}">
            <Setter Property="Width" Value="10"/>
            <Setter Property="Height" Value="10"/>
            <Setter Property="Margin" Value="10,5,5,5"/>
            <Setter Property="Opacity" Value="0"/>
            <Setter Property="Data" Value="M1,1 L9,9 M1,9 L9,1"/>
            <Setter Property="Stroke" Value="Red"/>
            <Setter Property="StrokeThickness" Value="1.5"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ScrollToTextLengthValid}" Value="true">
                    <Setter Property="Opacity" Value="1"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ContainsScrollToWord}" Value="true">
                    <Setter Property="Data" Value="M0,7 L4,9 L9,0"/>
                    <Setter Property="Stroke" Value="LimeGreen"/>
                    <Setter Property="StrokeThickness" Value="2"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- text box style, the text is used to search the results list-->
        <Style x:Key="SearchTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="MaxLength" Value="9" />
            <Setter Property="MinWidth" Value="80" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="CharacterCasing" Value="Lower"/>
            <Setter Property="IsEnabled" Value="false"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=WordListView, Path=HasItems}" Value="true">
                    <Setter Property="IsEnabled" Value="true"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- text box style limiting input to uppercase Latin letters-->
        <Style TargetType="{x:Type local:CountdownTextBox}">
            <Setter Property="Margin" Value="2,3" />
            <Setter Property="MaxLength" Value="1" />
            <Setter Property="MinWidth" Value="23" />
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="CharacterCasing" Value="Upper"/>
            <Setter Property="AutoTabStyle" Value="AlwaysTab"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- collection view grouping on word length -->
        <CollectionViewSource x:Key="WordListGrouping" Source="{Binding WordList}">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="Content.Length" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>

        <!-- a custom expander that looks like a tree view expander -->
        <Style x:Key="ExpanderHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Style.Resources>
                <SolidColorBrush x:Key="Expander.MouseOver" Color="#FF27C7F7"/>
                <SolidColorBrush x:Key="Expander.Pressed" Color="#FF000000"/>
                <SolidColorBrush x:Key="Expander.Static" Color="#FF808080"/>
            </Style.Resources>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent" SnapsToDevicePixels="False">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="21"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid>
                                    <Path x:Name="arrow" Data="M2,1 V9 L6,5 Z" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static}" StrokeThickness="1" VerticalAlignment="Center"/>
                                </Grid>
                                <ContentPresenter HorizontalAlignment="Left" Margin="0" Grid.Column="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="F1 M1,6 H7 L7,0 Z"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed}"/>
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource Expander.Static}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- an additional control template for the custom expander style -->
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- an expander style using the custom toggle button style for the expander -->
        <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
                            <DockPanel>
                                <ToggleButton x:Name="HeaderSite" Style="{StaticResource ExpanderHeaderStyle}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>

    <DockPanel Margin="5" LastChildFill="True">

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{StaticResource CommonTabPageLeftColumnWidth}"/>
            </Grid.ColumnDefinitions>

            <local:Clock Grid.Row="0" Width="100" Ticks="{Binding StopwatchController.Ticks}" HorizontalAlignment="Left" Margin="80,10,0,5" />
            
            <GroupBox Grid.Row="1" Header="Letters" Margin="5">

                <StackPanel>
                    <AdornerDecorator>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="2,10,0,7">
                            <local:CountdownTextBox Text="{Binding Letter_0, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_1, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_2, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_3, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_4, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_5, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_6, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_7, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}"/>
                            <local:CountdownTextBox Text="{Binding Letter_8, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}" AutoTabStyle="Off"/>
                        </StackPanel>
                    </AdornerDecorator>
                    <Grid Margin="5,10" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Button Grid.Column="0" Content="_Vowel" Command="{Binding PickVowelCommand}"/>
                        <Button Grid.Column="1" Content="C_onsonant" Command="{Binding PickConsonantCommand}" HorizontalAlignment="Center"/>
                        <Button Name="ClearButton" Grid.Column="2" Command="{Binding ClearCommand}" Padding="0" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}">
                            <Path Data="M0,0 L1,1 M0,1 L1,0" Stretch="Fill" Stroke="Black" StrokeThickness="1.5" Width="10" Height="10" Style="{StaticResource EnabledPathStyle}" />
                        </Button>
                    </Grid>

                </StackPanel>

            </GroupBox>

            <Grid Grid.Row="2" Margin="5,49,5,5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <local:ButtonPopup Grid.Column ="0" ItemsSource="{Binding LetterOptionsList}" ChooseCommand="{Binding ChooseLettersCommand}" SelectedIndex="{Binding LetterOptionIndex, Mode=TwoWay}"/>
                <Button Grid.Column ="1" Style="{StaticResource StartStopButtonStyle}" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
                <Button Grid.Column ="2" Content="_Solve" Command="{Binding SolveCommand}" IsDefault="True" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
            </Grid>
        </Grid>


        <Grid Margin="5,5,5,5" UseLayoutRounding="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,5" >
                <local:CountdownTextBox Text="{Binding ScrollToText, UpdateSourceTrigger=PropertyChanged, Mode=OneWayToSource}" Style="{StaticResource SearchTextBoxStyle}"/>
                <Button Command="{Binding ScrollToCommand}" Width="20" Height="20" Padding="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True">
                    <Path Data="M3,7 H12 L9,4 M12,7 L9,10" HorizontalAlignment="Center" Stroke="Black" StrokeThickness="1.5" VerticalAlignment="Center" Width="15" Height="15" Style="{StaticResource EnabledPathStyle}"/>
                    <Button.RenderTransform>
                        <TranslateTransform X="-1" />
                    </Button.RenderTransform>
                </Button>
                <Path Style="{StaticResource CrossTickStyle}"/>
            </StackPanel>

            <local:ScrollListView x:Name="WordListView" Grid.Row="1" ScrollToItem ="{Binding ScrollToItem}" SelectionMode="Extended" ItemsSource="{Binding Source={StaticResource WordListGrouping}}" Style="{StaticResource CommonListViewStyle}" ItemContainerStyle="{StaticResource CommonListViewItemContainerStyle}" ContextMenu="{StaticResource CopyPasteContextMenu}" VirtualizingPanel.IsVirtualizingWhenGrouping="True">
                <local:ScrollListView.View>
                    <GridView AllowsColumnReorder="false">
                        <GridView.ColumnHeaderContainerStyle>
                            <Style TargetType="GridViewColumnHeader">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </Style>
                        </GridView.ColumnHeaderContainerStyle>
                        <GridViewColumn Width="150" >
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding}" Margin="25,0,0,0"/>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                    </GridView>
                </local:ScrollListView.View>

                <local:ScrollListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Margin" Value="0"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type GroupItem}">
                                            <Expander IsExpanded="{Binding Items[0].IsExpanded, Mode=TwoWay}" Style="{StaticResource ExpanderStyle}">
                                                <Expander.Header>
                                                    <Grid>
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition MinWidth="100" />
                                                            <ColumnDefinition MinWidth="30" />
                                                        </Grid.ColumnDefinitions>
                                                        <TextBlock Grid.Column="0" Text="{Binding Name, StringFormat={}{0} letter words}" HorizontalAlignment="Left" Foreground="MediumBlue" FontWeight="DemiBold"/>
                                                        <TextBlock Grid.Column="1" Text="{Binding ItemCount}" HorizontalAlignment="Right" Foreground="DarkGray"/>
                                                    </Grid>
                                                </Expander.Header>
                                                <Expander.Content>
                                                    <ItemsPresenter Margin="0,1,0,0"/>
                                                </Expander.Content>
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </local:ScrollListView.GroupStyle>
                <local:ScrollListView.InputBindings>
                    <KeyBinding Command="{Binding ListCopyCommand}" Modifiers="Control" Key="C" />
                    <KeyBinding Command="{Binding ListSelectAllCommand}" Modifiers="Control" Key="A" />
                </local:ScrollListView.InputBindings>
            </local:ScrollListView>
        </Grid>
    </DockPanel>
</UserControl>